{:tasks
 {:init
  (do
    (def token (slurp ".token"))
    (def yd->url (partial format "https://adventofcode.com/%s/day/%s/input"))
    (def dirname (partial format "day%02d"))
    (def fname (partial format "%s/input.txt"))
    (defn d-or-today [d] (or d (.format (java.text.SimpleDateFormat. "d") (new java.util.Date))))
    (defn fetch-input [url token]
      (curl/get url {:raw-args ["--cookie" (format "session=%s" token)] :throw false})))
  fetch
  {:doc "-- get input for given day; requires session token stored in .token file, args default to today"
   :requires ([babashka.curl :as curl]
    [babashka.fs :as fs]
    [clojure.string :refer [join split]])
   :task
   (let [[d yr] *command-line-args*
         d* (d-or-today d)
         yr* (or yr "2022")
         url (yd->url yr* d*)
         dir (dirname (Integer. d*))
         path (fname dir)
         {:keys [status body]} (fetch-input url token)
         ok? (= status 200)]
     (when-not ok? (println status body) (System/exit 1))
     (when-not (fs/exists? dir) (println "Creating" dir) (fs/create-dir dir))
     (spit path body)
     (let [msg (format "AoC %s day %s input successfully fetched!" yr* d*)
           amount 30
           lines (split (slurp path) (re-pattern "\n"))]
       (println msg)
       (println (format "Showing first %d lines:" amount))
       (println (apply str (take (count msg) (repeat "-"))))
       (->> lines (take 30) (join "\n") println)
       (let [rst (drop amount lines)]
         (when-not (empty? rst)
           (println (format "[... %d lines skipped ...]" (count rst)))))))}}}
